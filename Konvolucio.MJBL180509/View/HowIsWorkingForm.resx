<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>1. Új fájl betöltésekor:
 - scorllbárok 0 pozicióban állna,
 - a kijelölt cella a 1/1 (ha van),
 - a megnyitott fájlt nem lockolja,
2. Fájl tartolom változás után:
 - újra betölti a fájlt,
 - nem változik a  scrollbár és és a kiválasztott cella utolsó poziciója,
 - frissíti a "Last write" időbélyeget a státusbáron
 - frissíti a "Row és Col" értékét a stástuszbáron 
 - nem lock-olja a fájlt
3. A cellák szélessége a látható tartalomhoz igazodik (a cellák szélessége változhat a  fájl frissüléskor).
3. A kijelölt oszlop törlése után egyel balra lép a kiválasztot cella.
4. Nem craselhet a kijelölt sor törlésekor fájl a tartalom módosítását követően.
5. Egy sor színe: 
 - zöld, ha az elso oszlop "OK" ( trimmelve, nem érzékeny a kis/nagy betűre)
 - vörös, ha az elso oszlop "KO" ( trimmelve, nem érzékeny a kis/nagy betűre)
 - fehér, ha nem OK és nem KO.
6. Ha "Always Show Last Record" engedélyezett, akkor a  fájl modsításakor:
 - mindig az utolsó sort jelenti meg (függetlenül attól hogy hozzáadás vagy törlés történt),
 - a vertikális scrollbár pozicióját megjegyzi, 
 - az oszlopok szélességét a látható tartalomhoz igazítja,
 - kijelölt cella pozicióját nem módosítja,
7. Inedxelések:
 - első oszlop indexe 1,
 - első sor indexe 1.
8. Limitek:
 - maximálisan megjeleníthető rekordok  száma:16000
 - maximálisan megjelníthető mezők száma:1024
 - maximális karakterszám egy cellában: nincs korlátozva
9. Formátum:
 - tizedes jelölő: '.'
 - határoló jelölő: ','
 - szövegjelolő: '"',
 - karakterkódolás: ASCII,
 - támogatott kiterjesztések: csv, mes, typ 
10. Fájl megnyitás
 - File-&gt;Open menüből,
 - drag &amp; drop módszerrel,
 - argumentumban, az alkalmázshoz fáj kiterjesztés tárístható
11. Fejléc tartalom létrehozása:
 - minimum 4 sort kell tartalmaznia a táblázatnak
 - az első 4 sor értékét rögizti az oszlopok fejlécében 

12. Az 1.0.0.5-fejlesztés alatt áll és csak a Tab-al elválasztott fájlokat támogatja.</value>
  </data>
</root>